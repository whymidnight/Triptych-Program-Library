// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package roller

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// NewRoll is the `newRoll` instruction.
type NewRoll struct {
	Max *uint64

	// [0] = [SIGNER] initializer
	//
	// [1] = [SIGNER] oracle
	//
	// [2] = [] rollerProgram
	//
	// [3] = [] slotHashes
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewNewRollInstructionBuilder creates a new `NewRoll` instruction builder.
func NewNewRollInstructionBuilder() *NewRoll {
	nd := &NewRoll{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 4),
	}
	return nd
}

// SetMax sets the "max" parameter.
func (inst *NewRoll) SetMax(max uint64) *NewRoll {
	inst.Max = &max
	return inst
}

// SetInitializerAccount sets the "initializer" account.
func (inst *NewRoll) SetInitializerAccount(initializer ag_solanago.PublicKey) *NewRoll {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(initializer).SIGNER()
	return inst
}

// GetInitializerAccount gets the "initializer" account.
func (inst *NewRoll) GetInitializerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetOracleAccount sets the "oracle" account.
func (inst *NewRoll) SetOracleAccount(oracle ag_solanago.PublicKey) *NewRoll {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(oracle).SIGNER()
	return inst
}

// GetOracleAccount gets the "oracle" account.
func (inst *NewRoll) GetOracleAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetRollerProgramAccount sets the "rollerProgram" account.
func (inst *NewRoll) SetRollerProgramAccount(rollerProgram ag_solanago.PublicKey) *NewRoll {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(rollerProgram)
	return inst
}

// GetRollerProgramAccount gets the "rollerProgram" account.
func (inst *NewRoll) GetRollerProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetSlotHashesAccount sets the "slotHashes" account.
func (inst *NewRoll) SetSlotHashesAccount(slotHashes ag_solanago.PublicKey) *NewRoll {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(slotHashes)
	return inst
}

// GetSlotHashesAccount gets the "slotHashes" account.
func (inst *NewRoll) GetSlotHashesAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

func (inst NewRoll) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_NewRoll,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst NewRoll) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *NewRoll) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Max == nil {
			return errors.New("Max parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Initializer is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Oracle is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.RollerProgram is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.SlotHashes is not set")
		}
	}
	return nil
}

func (inst *NewRoll) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("NewRoll")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Max", *inst.Max))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=4]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("  initializer", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("       oracle", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("rollerProgram", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("   slotHashes", inst.AccountMetaSlice.Get(3)))
					})
				})
		})
}

func (obj NewRoll) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Max` param:
	err = encoder.Encode(obj.Max)
	if err != nil {
		return err
	}
	return nil
}
func (obj *NewRoll) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Max`:
	err = decoder.Decode(&obj.Max)
	if err != nil {
		return err
	}
	return nil
}

// NewNewRollInstruction declares a new NewRoll instruction with the provided parameters and accounts.
func NewNewRollInstruction(
	// Parameters:
	max uint64,
	// Accounts:
	initializer ag_solanago.PublicKey,
	oracle ag_solanago.PublicKey,
	rollerProgram ag_solanago.PublicKey,
	slotHashes ag_solanago.PublicKey) *NewRoll {
	return NewNewRollInstructionBuilder().
		SetMax(max).
		SetInitializerAccount(initializer).
		SetOracleAccount(oracle).
		SetRollerProgramAccount(rollerProgram).
		SetSlotHashesAccount(slotHashes)
}
