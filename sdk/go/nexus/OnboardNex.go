// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package nexus

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// OnboardNex is the `onboardNex` instruction.
type OnboardNex struct {

	// [0] = [WRITE, SIGNER] nextumer
	//
	// [1] = [WRITE] nex
	//
	// [2] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewOnboardNexInstructionBuilder creates a new `OnboardNex` instruction builder.
func NewOnboardNexInstructionBuilder() *OnboardNex {
	nd := &OnboardNex{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 3),
	}
	return nd
}

// SetNextumerAccount sets the "nextumer" account.
func (inst *OnboardNex) SetNextumerAccount(nextumer ag_solanago.PublicKey) *OnboardNex {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(nextumer).WRITE().SIGNER()
	return inst
}

// GetNextumerAccount gets the "nextumer" account.
func (inst *OnboardNex) GetNextumerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetNexAccount sets the "nex" account.
func (inst *OnboardNex) SetNexAccount(nex ag_solanago.PublicKey) *OnboardNex {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(nex).WRITE()
	return inst
}

// GetNexAccount gets the "nex" account.
func (inst *OnboardNex) GetNexAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *OnboardNex) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *OnboardNex {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *OnboardNex) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

func (inst OnboardNex) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_OnboardNex,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst OnboardNex) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *OnboardNex) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Nextumer is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Nex is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *OnboardNex) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("OnboardNex")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=3]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("     nextumer", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("          nex", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("systemProgram", inst.AccountMetaSlice.Get(2)))
					})
				})
		})
}

func (obj OnboardNex) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *OnboardNex) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewOnboardNexInstruction declares a new OnboardNex instruction with the provided parameters and accounts.
func NewOnboardNexInstruction(
	// Accounts:
	nextumer ag_solanago.PublicKey,
	nex ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *OnboardNex {
	return NewOnboardNexInstructionBuilder().
		SetNextumerAccount(nextumer).
		SetNexAccount(nex).
		SetSystemProgramAccount(systemProgram)
}
