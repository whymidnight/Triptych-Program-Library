// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package nexus

import (
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type Nex struct {
	Nextumer ag_solanago.PublicKey
	Moniker  ag_solanago.PublicKey
}

var NexDiscriminator = [8]byte{156, 199, 187, 251, 27, 195, 241, 206}

func (obj Nex) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(NexDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Nextumer` param:
	err = encoder.Encode(obj.Nextumer)
	if err != nil {
		return err
	}
	// Serialize `Moniker` param:
	err = encoder.Encode(obj.Moniker)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Nex) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(NexDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[156 199 187 251 27 195 241 206]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Nextumer`:
	err = decoder.Decode(&obj.Nextumer)
	if err != nil {
		return err
	}
	// Deserialize `Moniker`:
	err = decoder.Decode(&obj.Moniker)
	if err != nil {
		return err
	}
	return nil
}

type Moniker struct {
	Nextumer ag_solanago.PublicKey
	Nex      ag_solanago.PublicKey
	Name     string
	Deleted  bool
}

var MonikerDiscriminator = [8]byte{32, 150, 159, 171, 199, 80, 114, 141}

func (obj Moniker) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(MonikerDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Nextumer` param:
	err = encoder.Encode(obj.Nextumer)
	if err != nil {
		return err
	}
	// Serialize `Nex` param:
	err = encoder.Encode(obj.Nex)
	if err != nil {
		return err
	}
	// Serialize `Name` param:
	err = encoder.Encode(obj.Name)
	if err != nil {
		return err
	}
	// Serialize `Deleted` param:
	err = encoder.Encode(obj.Deleted)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Moniker) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(MonikerDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[32 150 159 171 199 80 114 141]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Nextumer`:
	err = decoder.Decode(&obj.Nextumer)
	if err != nil {
		return err
	}
	// Deserialize `Nex`:
	err = decoder.Decode(&obj.Nex)
	if err != nil {
		return err
	}
	// Deserialize `Name`:
	err = decoder.Decode(&obj.Name)
	if err != nil {
		return err
	}
	// Deserialize `Deleted`:
	err = decoder.Decode(&obj.Deleted)
	if err != nil {
		return err
	}
	return nil
}
