// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package nexus

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// AssignMoniker is the `assignMoniker` instruction.
type AssignMoniker struct {
	NexBump     *uint8
	MonikerBump *uint8
	MonikerName *string

	// [0] = [SIGNER] nextumer
	//
	// [1] = [WRITE] nex
	//
	// [2] = [WRITE] moniker
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewAssignMonikerInstructionBuilder creates a new `AssignMoniker` instruction builder.
func NewAssignMonikerInstructionBuilder() *AssignMoniker {
	nd := &AssignMoniker{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 3),
	}
	return nd
}

// SetNexBump sets the "nexBump" parameter.
func (inst *AssignMoniker) SetNexBump(nexBump uint8) *AssignMoniker {
	inst.NexBump = &nexBump
	return inst
}

// SetMonikerBump sets the "monikerBump" parameter.
func (inst *AssignMoniker) SetMonikerBump(monikerBump uint8) *AssignMoniker {
	inst.MonikerBump = &monikerBump
	return inst
}

// SetMonikerName sets the "monikerName" parameter.
func (inst *AssignMoniker) SetMonikerName(monikerName string) *AssignMoniker {
	inst.MonikerName = &monikerName
	return inst
}

// SetNextumerAccount sets the "nextumer" account.
func (inst *AssignMoniker) SetNextumerAccount(nextumer ag_solanago.PublicKey) *AssignMoniker {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(nextumer).SIGNER()
	return inst
}

// GetNextumerAccount gets the "nextumer" account.
func (inst *AssignMoniker) GetNextumerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetNexAccount sets the "nex" account.
func (inst *AssignMoniker) SetNexAccount(nex ag_solanago.PublicKey) *AssignMoniker {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(nex).WRITE()
	return inst
}

// GetNexAccount gets the "nex" account.
func (inst *AssignMoniker) GetNexAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetMonikerAccount sets the "moniker" account.
func (inst *AssignMoniker) SetMonikerAccount(moniker ag_solanago.PublicKey) *AssignMoniker {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(moniker).WRITE()
	return inst
}

// GetMonikerAccount gets the "moniker" account.
func (inst *AssignMoniker) GetMonikerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

func (inst AssignMoniker) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_AssignMoniker,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst AssignMoniker) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *AssignMoniker) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.NexBump == nil {
			return errors.New("NexBump parameter is not set")
		}
		if inst.MonikerBump == nil {
			return errors.New("MonikerBump parameter is not set")
		}
		if inst.MonikerName == nil {
			return errors.New("MonikerName parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Nextumer is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Nex is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Moniker is not set")
		}
	}
	return nil
}

func (inst *AssignMoniker) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("AssignMoniker")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=3]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("    NexBump", *inst.NexBump))
						paramsBranch.Child(ag_format.Param("MonikerBump", *inst.MonikerBump))
						paramsBranch.Child(ag_format.Param("MonikerName", *inst.MonikerName))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=3]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("nextumer", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("     nex", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta(" moniker", inst.AccountMetaSlice.Get(2)))
					})
				})
		})
}

func (obj AssignMoniker) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `NexBump` param:
	err = encoder.Encode(obj.NexBump)
	if err != nil {
		return err
	}
	// Serialize `MonikerBump` param:
	err = encoder.Encode(obj.MonikerBump)
	if err != nil {
		return err
	}
	// Serialize `MonikerName` param:
	err = encoder.Encode(obj.MonikerName)
	if err != nil {
		return err
	}
	return nil
}
func (obj *AssignMoniker) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `NexBump`:
	err = decoder.Decode(&obj.NexBump)
	if err != nil {
		return err
	}
	// Deserialize `MonikerBump`:
	err = decoder.Decode(&obj.MonikerBump)
	if err != nil {
		return err
	}
	// Deserialize `MonikerName`:
	err = decoder.Decode(&obj.MonikerName)
	if err != nil {
		return err
	}
	return nil
}

// NewAssignMonikerInstruction declares a new AssignMoniker instruction with the provided parameters and accounts.
func NewAssignMonikerInstruction(
	// Parameters:
	nexBump uint8,
	monikerBump uint8,
	monikerName string,
	// Accounts:
	nextumer ag_solanago.PublicKey,
	nex ag_solanago.PublicKey,
	moniker ag_solanago.PublicKey) *AssignMoniker {
	return NewAssignMonikerInstructionBuilder().
		SetNexBump(nexBump).
		SetMonikerBump(monikerBump).
		SetMonikerName(monikerName).
		SetNextumerAccount(nextumer).
		SetNexAccount(nex).
		SetMonikerAccount(moniker)
}
