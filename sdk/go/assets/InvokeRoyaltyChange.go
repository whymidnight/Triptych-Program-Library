// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package assets

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// InvokeRoyaltyChange is the `invokeRoyaltyChange` instruction.
type InvokeRoyaltyChange struct {
	AuthorityBump *uint8
	Amount        *uint16

	// [0] = [WRITE] originalAuthority
	//
	// [1] = [WRITE] authority
	//
	// [2] = [] callerProgram
	//
	// [3] = [] mplMetadataProgram
	//
	// [4] = [WRITE] metadataAccount
	//
	// [5] = [WRITE] mint
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewInvokeRoyaltyChangeInstructionBuilder creates a new `InvokeRoyaltyChange` instruction builder.
func NewInvokeRoyaltyChangeInstructionBuilder() *InvokeRoyaltyChange {
	nd := &InvokeRoyaltyChange{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 6),
	}
	return nd
}

// SetAuthorityBump sets the "authorityBump" parameter.
func (inst *InvokeRoyaltyChange) SetAuthorityBump(authorityBump uint8) *InvokeRoyaltyChange {
	inst.AuthorityBump = &authorityBump
	return inst
}

// SetAmount sets the "amount" parameter.
func (inst *InvokeRoyaltyChange) SetAmount(amount uint16) *InvokeRoyaltyChange {
	inst.Amount = &amount
	return inst
}

// SetOriginalAuthorityAccount sets the "originalAuthority" account.
func (inst *InvokeRoyaltyChange) SetOriginalAuthorityAccount(originalAuthority ag_solanago.PublicKey) *InvokeRoyaltyChange {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(originalAuthority).WRITE()
	return inst
}

// GetOriginalAuthorityAccount gets the "originalAuthority" account.
func (inst *InvokeRoyaltyChange) GetOriginalAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetAuthorityAccount sets the "authority" account.
func (inst *InvokeRoyaltyChange) SetAuthorityAccount(authority ag_solanago.PublicKey) *InvokeRoyaltyChange {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(authority).WRITE()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *InvokeRoyaltyChange) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetCallerProgramAccount sets the "callerProgram" account.
func (inst *InvokeRoyaltyChange) SetCallerProgramAccount(callerProgram ag_solanago.PublicKey) *InvokeRoyaltyChange {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(callerProgram)
	return inst
}

// GetCallerProgramAccount gets the "callerProgram" account.
func (inst *InvokeRoyaltyChange) GetCallerProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetMplMetadataProgramAccount sets the "mplMetadataProgram" account.
func (inst *InvokeRoyaltyChange) SetMplMetadataProgramAccount(mplMetadataProgram ag_solanago.PublicKey) *InvokeRoyaltyChange {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(mplMetadataProgram)
	return inst
}

// GetMplMetadataProgramAccount gets the "mplMetadataProgram" account.
func (inst *InvokeRoyaltyChange) GetMplMetadataProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetMetadataAccountAccount sets the "metadataAccount" account.
func (inst *InvokeRoyaltyChange) SetMetadataAccountAccount(metadataAccount ag_solanago.PublicKey) *InvokeRoyaltyChange {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(metadataAccount).WRITE()
	return inst
}

// GetMetadataAccountAccount gets the "metadataAccount" account.
func (inst *InvokeRoyaltyChange) GetMetadataAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetMintAccount sets the "mint" account.
func (inst *InvokeRoyaltyChange) SetMintAccount(mint ag_solanago.PublicKey) *InvokeRoyaltyChange {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(mint).WRITE()
	return inst
}

// GetMintAccount gets the "mint" account.
func (inst *InvokeRoyaltyChange) GetMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

func (inst InvokeRoyaltyChange) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_InvokeRoyaltyChange,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst InvokeRoyaltyChange) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *InvokeRoyaltyChange) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.AuthorityBump == nil {
			return errors.New("AuthorityBump parameter is not set")
		}
		if inst.Amount == nil {
			return errors.New("Amount parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.OriginalAuthority is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Authority is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.CallerProgram is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.MplMetadataProgram is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.MetadataAccount is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.Mint is not set")
		}
	}
	return nil
}

func (inst *InvokeRoyaltyChange) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("InvokeRoyaltyChange")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("AuthorityBump", *inst.AuthorityBump))
						paramsBranch.Child(ag_format.Param("       Amount", *inst.Amount))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=6]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta(" originalAuthority", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("         authority", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("     callerProgram", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("mplMetadataProgram", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("          metadata", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("              mint", inst.AccountMetaSlice.Get(5)))
					})
				})
		})
}

func (obj InvokeRoyaltyChange) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `AuthorityBump` param:
	err = encoder.Encode(obj.AuthorityBump)
	if err != nil {
		return err
	}
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	return nil
}
func (obj *InvokeRoyaltyChange) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `AuthorityBump`:
	err = decoder.Decode(&obj.AuthorityBump)
	if err != nil {
		return err
	}
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	return nil
}

// NewInvokeRoyaltyChangeInstruction declares a new InvokeRoyaltyChange instruction with the provided parameters and accounts.
func NewInvokeRoyaltyChangeInstruction(
	// Parameters:
	authorityBump uint8,
	amount uint16,
	// Accounts:
	originalAuthority ag_solanago.PublicKey,
	authority ag_solanago.PublicKey,
	callerProgram ag_solanago.PublicKey,
	mplMetadataProgram ag_solanago.PublicKey,
	metadataAccount ag_solanago.PublicKey,
	mint ag_solanago.PublicKey) *InvokeRoyaltyChange {
	return NewInvokeRoyaltyChangeInstructionBuilder().
		SetAuthorityBump(authorityBump).
		SetAmount(amount).
		SetOriginalAuthorityAccount(originalAuthority).
		SetAuthorityAccount(authority).
		SetCallerProgramAccount(callerProgram).
		SetMplMetadataProgramAccount(mplMetadataProgram).
		SetMetadataAccountAccount(metadataAccount).
		SetMintAccount(mint)
}
